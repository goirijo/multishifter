import json
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm

def digest_sorted_surface_data(a,b,x,y,z):
    """Given sorted data with the a/b fractional points and the x/y Cartesian coordinates,
    return the x,y,z values with the correct mesh grid shape and make the z
    values relative to he minimum.

    Parameters
    ----------
    a : array
    b: array
    x: array
    y: array
    z : array

    Returns
    -------
    X,Y,Z : 2d-array,2d-array,2d-array

    """
    afloats={int(val*1e8+0.5) for val in a}
    bfloats={int(val*1e8+0.5) for val in b}

    amax=len(afloats)
    bmax=len(bfloats)

    X=x.values.reshape(amax,bmax)
    Y=y.values.reshape(amax,bmax)
    Z=(z-min(z)).values.reshape(amax,bmax)

    return X,Y,Z


def plot_gamma_surface(ax,a,b,x,y,z):
    """Given sorted data with the a/b points and the x/y Cartesian coordinates,
    plot the gamma surface. This assumes you're passing one value per
    grid point and that they're all organized the same way.

    Parameters
    ----------
    ax : mpl ax with 3d projection
    a : array
    b: array
    x: array
    y: array
    z : array

    Returns
    -------
    ax

    """
    X,Y,Z=digest_sorted_surface_data(a,b,x,y,z)

    ax.plot_surface(X,Y,Z,facecolors=cm.jet(Z/np.max(Z)),antialiased=False)
    ax.set_aspect('equal')

    return ax

def plot_projected_gamma_surface(ax,a,b,x,y,z):
    """Given sorted data with the a/b points and the x/y Cartesian coordinates,
    plot the gamma surface. This assumes you're passing one value per
    grid point and that they're all organized the same way.

    Parameters
    ----------
    ax : mpl ax
    a : array
    b: array
    x: array
    y: array
    z : array

    Returns
    -------
    ax

    """
    X,Y,Z=digest_sorted_surface_data(a,b,x,y,z)

    ax.pcolormesh(X,Y,Z)
    ax.set_aspect('equal')

    return ax

def main():
    dump=pd.read_json("./testing.values.json")
    filtered=dump.loc[dump["cleavage"]==0.0]
    filtered=filtered.sort_values(["a","b"])

    fig=plt.figure()
    ax=fig.add_subplot(111,projection='3d')
    ax=plot_gamma_surface(ax,filtered["a_frac"],filtered["b_frac"],filtered["x_cart"],filtered["y_cart"],filtered["value"])
    plt.show()

    fig=plt.figure()
    ax=fig.add_subplot(111)
    ax=plot_projected_gamma_surface(ax,filtered["a_frac"],filtered["b_frac"],filtered["x_cart"],filtered["y_cart"],filtered["value"])
    plt.show()

    print json.dumps({key : filtered[key].tolist() for key in filtered},indent=4)

if __name__=="__main__":
    main()
